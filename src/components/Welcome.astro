---
---

<div id="container" class="p-4">
	<main>
		Welcome to <span class="font-bold">Stupid Captcha!</span><br />
		Before accessing the website, we must ensure you are not a <span class="text-red-500 font-bold">robot</span> ðŸ¤–.<br />
		<button class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-xl cursor-pointer hover:bg-blue-400">I'm not a robot</button>
	</main>

	<div id="captchaGrid" class="grid grid-cols-3 w-47 h-47"></div>
	<div id="captchaAiGrid" class="grid grid-cols-3 w-47 h-47"></div>
	<button id="reloadCaptcha" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-xl cursor-pointer hover:bg-blue-400">reload</button>
	<button id="validateCaptcha" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-xl cursor-pointer hover:bg-blue-400">validate</button>
</div>

<script lang="js">
	const grid = document.getElementById("captchaGrid");
	const aiGrid = document.getElementById("captchaAiGrid");
	const reloadBtn = document.getElementById("reloadCaptcha");
	const validateBtn = document.getElementById("validateCaptcha");
	let correctImages = [];
	let imagesToggle = [0, 0, 0, 0, 0, 0, 0, 0, 0]
	let imagesToggleAi = [0, 0, 0, 0, 0, 0, 0, 0, 0]
	let timeouts = []

	async function loadCaptcha() {
		// 1. Generate random number 0â€“5
		const randomNum = Math.floor(Math.random() * 5);

		// 2. Clear old images
		grid.innerHTML = "";
		aiGrid.innerHTML = "";
		imagesToggle = [0, 0, 0, 0, 0, 0, 0, 0, 0];
		imagesToggleAi = [0, 0, 0, 0, 0, 0, 0, 0, 0];
		timeouts.forEach(timeout => clearTimeout(timeout));
		timeouts = [];

		// 3. Add 9 images from the chosen folder
		for (let i = 1; i <= 9; i++) {
			const wrapper = document.createElement("div");
			wrapper.className = "w-15 h-15 bg-blue-300 flex items-center justify-center";
			wrapper.setAttribute("onclick", `shrinkImage('img-${i}', ${i - 1})`);

			const img = document.createElement("img");
			img.id = `img-${i}`;
			img.src = `/captcha${randomNum}/img${i}.jpeg`; // adjust extension if png/webp
			img.alt = `Captcha ${i}`;
			img.className = "w-full h-full";

			wrapper.appendChild(img);
			grid.appendChild(wrapper);
		}

		for (let i = 1; i <= 9; i++) {
			const wrapper = document.createElement("div");
			wrapper.className = "w-15 h-15 bg-blue-300 flex items-center justify-center";

			const img = document.createElement("img");
			img.id = `img-ai-${i}`;
			img.src = `/captcha${randomNum}/img${i}.jpeg`; // adjust extension if png/webp
			img.alt = `CaptchaAi ${i}`;
			img.className = "w-full h-full";

			wrapper.appendChild(img);
			aiGrid.appendChild(wrapper);
		}
		
		try {
			const res = await fetch(`/captcha${randomNum}/correct.json`);
			if (!res.ok) throw new Error("Could not load correct.json");
			correctImages = await res.json();
			console.log("Correct answers for captcha", randomNum, correctImages);
		} catch (err) {
			console.error("Error loading correct.json:", err);
			correctImages = [];
		}
		startAiSolve();
	}

	function validateCaptcha() {
		console.log(`correctImages: ${JSON.stringify(correctImages)}`);
		console.log(`correct type: ${typeof correctImages}`);
		const exists = correctImages.some(inner => arraysEqual(imagesToggle, inner));

		if (exists) {
			alert("Captcha validated successfully!");
		} else {
			alert("Captcha validation failed. Please try again.");
		}
	}

	// Load on first page render
	loadCaptcha();

	// Reload on button press
	reloadBtn.addEventListener("click", loadCaptcha);
	validateBtn.addEventListener("click", validateCaptcha);

	function shrinkImage(image, index) {
		console.log(`Toggle image: ${image}`);
		if (imagesToggle[index] === 0) { 
			const img = document.getElementById(image);
			if (img === null) return;
			img.classList.remove('w-full', 'h-full');
			img.classList.add('w-12', 'h-12');
			imagesToggle[index] = 1;
		} else {
			const img = document.getElementById(image);
			if (img === null) return;
			img.classList.remove('w-12', 'h-12');
			img.classList.add('w-full', 'h-full');
			imagesToggle[index] = 0;
		}

		console.log(`state: ${imagesToggle}`)
	}

	function shrinkImageAi(image, index) {
		console.log(`Toggle image: ${image}`);
		if (imagesToggle[index] === 0) { 
			const img = document.getElementById(image);
			if (img === null) return;
			img.classList.remove('w-full', 'h-full');
			img.classList.add('w-12', 'h-12');
			imagesToggleAi[index] = 1;
		} else {
			const img = document.getElementById(image);
			if (img === null) return;
			img.classList.remove('w-12', 'h-12');
			img.classList.add('w-full', 'h-full');
			imagesToggleAi[index] = 0;
		}

		console.log(`state: ${imagesToggle}`)
	}

	function startAiSolve() {	
		const totalTime = 10000;
		let correctArray = [];

		let maxImages = 0;
		let maxImagesIndex = 0;
		for (let i = 0; i < correctImages.length; i++) {
			imagesNum = correctImages[i].reduce((sum, val) => sum + val, 0);
			if (imagesNum > maxImages) {
				maxImages = imagesNum;
				maxImagesIndex = i;
			}
		}
		const logCount = maxImages
		correctArray = correctImages[maxImagesIndex];

		// Ensure at least one log happens at the end
		if (logCount < 1) logCount = 1;

		// Generate random times within the range (0, totalTime)
		const times = [];
		const imagesIndex = [];
		for (let i = 0; i < correctArray.length; i++) {
			if (correctArray[i] === 1) {
				imagesIndex.push(i);
			}
		}
		for (let i = 0; i < logCount - 1; i++) {
			times.push(Math.random() * totalTime);
		}

		// Always add the final log exactly at the end
		times.push(totalTime);

		// Sort so they trigger in order
		times.sort((a, b) => a - b);

		// Schedule logs
		times.forEach((t, index) => {
			const timeoutId = setTimeout(() => {
				shrinkImageAi(`img-ai-${imagesIndex[index] + 1}`, imagesIndex[index]);
			}, t);
			timeouts.push(timeoutId);
		});
	}

	function arraysEqual(a, b) {
		if (a.length !== b.length) return false;
		return a.every((val, i) => val === b[i]);
	}
</script>